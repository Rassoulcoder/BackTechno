package com.example.demo.security;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;

import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.web.filter.OncePerRequestFilter;

import com.auth0.jwt.JWT;
import com.auth0.jwt.JWTVerifier;
import com.auth0.jwt.algorithms.Algorithm;
import com.auth0.jwt.interfaces.DecodedJWT;

import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

public class JWTAuthorizationFilter extends OncePerRequestFilter {

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
         
		String jwt = request.getHeader("Authorization");
		if(jwt == null || !jwt.startsWith(SecParams.prefixe ))
		{
			filterChain.doFilter(request,response);
			return;
		}
		JWTVerifier verificateur = JWT.require(Algorithm.HMAC256(SecParams.Signature)).build();
		
		jwt = jwt.substring(SecParams.prefixe.length());
		DecodedJWT decodedJwt = verificateur.verify(jwt);
		
		String username = decodedJwt.getSubject();
		List<String> roles = decodedJwt.getClaims().get("roles").asList(String.class);
		
		Collection<GrantedAuthority> authorities = new ArrayList<>();
		
		for(String r:roles) {
			authorities.add(new SimpleGrantedAuthority(r));
		}
		
		UsernamePasswordAuthenticationToken user = new UsernamePasswordAuthenticationToken(username, null, authorities);
		
		SecurityContextHolder.getContext().setAuthentication(user);
		filterChain.doFilter(request, response);
	}
		
	

}
